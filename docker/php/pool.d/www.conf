; Starts a new pool named 'www'
[www]

; The unix user/group of worker processes
user = ${NON_ROOT_USER}
group = ${NON_ROOT_USER}

; The address on which to accept FastCGI requests
listen = 0.0.0.0:9000

; The unix user/group of the unix socket, if one is used
listen.owner = ${NON_ROOT_USER}
listen.group = ${NON_ROOT_USER}

; Redirects the access log to Docker logs
access.log = /dev/stderr

; Redirects worker stdout/stderr to Docker logs
catch_workers_output = yes

; Decorates worker output when catch_workers_output = yes
decorate_workers_output = no

; Clears environment variables in worker processes
clear_env = no

; Terminates worker processes after [specified] seconds
request_terminate_timeout = 60

; How the process manager controls the number of worker processes
; Accepted: static, dynamic, ondemand
pm = ${POOL_WWW_PM:-dynamic}

; pm = static: The fixed number of worker processes
; pm = dynamic: The max number of worker processes alive at the same time
; pm = ondemand: The max number of worker processes alive at the same time
pm.max_children = ${POOL_WWW_PM_MAX_CHILDREN:-5}

; pm = dynamic: The number of worker processes created on startup
pm.start_servers = ${POOL_WWW_PM_START_SERVERS:-2}

; pm = dynamic: The min number of worker processes in an idle state
pm.min_spare_servers = ${POOL_WWW_PM_MIN_SPARE_SERVERS:-1}

; pm = dynamic: The max number of worker processes in an idle state
pm.max_spare_servers = ${POOL_WWW_PM_MAX_SPARE_SERVERS:-3}

; pm = dynamic: The max number of worker processes to spawn at one time
pm.max_spawn_rate = ${POOL_WWW_PM_MAX_SPAWN_RATE:-32}

; pm = ondemand: The number of seconds until an idle process will be killed
pm.process_idle_timeout = ${POOL_WWW_PM_PROCESS_IDLE_TIMEOUT:-10s}

; The number of requests each worker process should execute before respawning
pm.max_requests = ${POOL_WWW_PM_MAX_REQUESTS:-0}
